apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'io.fabric'

apply plugin: 'com.google.firebase.appdistribution'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

//def keysPropertiesFile = rootProject.file("keys.properties")
//def keysProperties = new Properties()
//keysProperties.load(new FileInputStream(keysPropertiesFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.github.kiolk.alphabet"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 8
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "PRICVACY_POLICY", "\"github.com/Kiolk/Alphabet/blob/develop/docs/PrivacyPolicyEn.md\""
    }

    signingConfigs{
        dev{
            storeFile file("../keys/dev.jks")
            storePassword "alphabet-dev-key"
            keyAlias "alphabet-dev-key"
            keyPassword "alphabet-dev-key"
        }

        qa{
            storeFile file("../keys/qa.jks")
            storePassword "alphabet-qa-key"
            keyAlias "alphabet-qa-key"
            keyPassword "alphabet-qa-key"
        }

        prod{
//            storeFile file("../keys/prod/prod.jks")
//            storePassword keysProperties["STORE_PASSWORD"]
//            keyAlias keysProperties["STORE_ALIAS"]
//            keyPassword keysProperties["KEY_PRIVATE_PASSWORD"]

            storeFile file("../keys/prod.jks")
            storePassword "alphabet-prod-key"
            keyAlias "alphabet-prod-key"
            keyPassword "alphabet-prod-key"
        }
    }

    flavorDimensions "version"

    productFlavors{
        dev{
            dimension "version"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"

            buildConfigField "String", "ApiUrl", "\"https://us-central1-alphabet-project-belarus.cloudfunctions.net\""

            signingConfig signingConfigs.dev
        }

        qa{
            dimension "version"
            applicationIdSuffix ".qa"
            versionNameSuffix "-qa"

            buildConfigField "String", "ApiUrl", "\"https://us-central1-alphabet-project-belarus.cloudfunctions.net\""

            signingConfig signingConfigs.qa

            ext.betaDistributionReleaseNotes = "\"${release_v_1_3}\""
            ext.betaDistributionEmails = "tyteishi@gmail.com"
            ext.betaDistributionGroupAliases = "Alphabet-Dev-Team, Alphabet-Qa-Team"

            firebaseAppDistribution{
                appId "1:108001020388:android:6c0e8fd9f37ec1ad105ff1"
                serviceCredentialsFile="secrets/alphabet-project-belarus-2dc41d2a19b4.json"
//                releaseNotesFile="../release_notes/1_1_0.txt"
                testers="tyteishi@gmail.com"
                groups=" LemantarQa "
            }
        }

        prod{
            dimension "version"

            buildConfigField "String", "ApiUrl", "\"https://us-central1-alphabet-project-belarus.cloudfunctions.net\""

            signingConfig signingConfigs.prod
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

task uploadeToCrashlytics{
    def commit = getCurrentCommit()

//    if(commit.matches("(.*)[B,b]ump(.*)")){
        dependsOn("assembleQaRelease")
        dependsOn('crashlyticsUploadDistributionQaRelease')
//    }else{
//        println commit
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'io.supercharge:shimmerlayout:2.1.0'

    //Dependency injection
    implementation 'com.google.dagger:dagger:2.22.1'
    kapt 'com.google.dagger:dagger-compiler:2.22.1'

    //buterknife
    implementation "com.jakewharton:butterknife:8.8.1"
    kapt "com.jakewharton:butterknife-compiler:8.8.1"

    //flexbox
    implementation "com.google.android:flexbox:1.0.0"

    implementation 'com.jeremyfeinstein.slidingmenu:library:1.3@aar'

    implementation libraries.okHttp
    implementation libraries.okHttpLoggingInterceptor

    implementation libraries.retrofit
    implementation libraries.retrofitGsonConverter
    implementation libraries.retrofitRxJavaAdapter

    implementation libraries.room
    implementation libraries.roomRxJav2
    kapt libraries.roomCompiler


    implementation libraries.rxJava2
    implementation libraries.rxKotlin
    implementation libraries.rxAndroid

    //moxy
    implementation libraries.moxy
    implementation libraries.moxyAppCompat
    kapt libraries.moxyCompiler

    //conductor
    implementation libraries.conductor
    implementation libraries.conductorSupport
    implementation libraries.conductorDialog

    //stecho
    implementation libraries.stecho

    //timber
    implementation libraries.timber

    //chromeTabs
    //noinspection GradleCompatible
    implementation libraries.chromeTabs

    implementation "com.android.support:design:28.0.0"
    implementation "com.android.support:cardview-v7:28.0.0"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true;
    }
}

apply plugin: 'com.google.gms.google-services'
//configurations.all {
//    resolutionStrategy {
//        force libraries.okHttp
//        force libraries.supportAnnotations
//    }
//}


